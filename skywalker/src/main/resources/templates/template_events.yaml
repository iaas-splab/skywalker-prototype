# TEMPLATE FOR TESTING ALL EVENT SOURCES
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  DynamoDBTable:
      Type: AWS::DynamoDB::Table
  HelloWorldFunction:
    Properties:
      CodeUri: s3://ayhans-lambdas/084b55658168cf644d0923ea8c301843
      Environment:
        Variables:
          SNS_TOPIC_ARN: {Ref: HelloWorldTopic}
      Events:
        HelloWorldApi:
          Properties: {Method: GET, Path: /}
          Type: Api
        HelloWorldS3:
          Type: S3
          Properties:
            Bucket: my-photo-bucket
            Events: s3:ObjectCreated:*
        HelloWorldSNS:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:us-east-1:123456789012:my_topic
            FilterPolicy: here will be an object in real world scenarios
        HelloWorldKinesis:
          Type: Kinesis
          Properties:
            Stream: arn:aws:kinesis:us-east-1:123456789012:stream/my-stream
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: false
        HelloWorldApi:
          Properties: {Method: GET, Path: /}
          Type: Api
        HelloWorldDynamoDB:
          Type: DynamoDB
          Properties:
            Stream: arn:aws:dynamodb:us-east-1:123456789012:table/TestTable/stream/2016-08-11T21:21:33.291
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: false
        HelloWorldSQS:
          Type: SQS
          Properties:
            Queue: arn:aws:sqs:us-west-2:012345678901:my-queue
            BatchSize: 10
            Enabled: false
        HelloWorldSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
        HelloWorldCloudWatchEvent:
          Type: CloudWatchEvent
          Properties:
            Input: some input
            InputPath: /input
        HelloWorldCloudWatchLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: MyLogGroup
            FilterPattern: Error
        HelloWorldIoTRule:
          Type: IoTRule
          Properties:
            Sql: "SELECT * FROM 'iot/test'"
      Handler: index.handler
      Policies:
        SNSPublishMessagePolicy:
          TopicNameIntr:
            Fn::GetAtt: [HelloWorldTopic, TopicName]
          Type: SNSPublishMessagePolicy
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  HelloWorldTopic:
    Properties:
      Subscription:
        {Endpoint: kaplay4@gmail.com, Protocol: email}
    Type: AWS::SNS::Topic
  TwoWorldFunction:
    Properties:
      CodeUri: s3://ayhans-lambdas/084b55658168cf644d0923ea8c301843
      Environment:
        Variables:
          SNS_TOPIC_ARN: {Ref: HelloWorldTopic}
      Events:
        HelloWorldApi:
          Properties: {Method: GET, Path: /}
          Type: Api
      Handler: index.handler
      Policies:
        SNSPublishMessagePolicy:
          TopicNameIntr:
            Fn::GetAtt: [HelloWorldTopic, TopicName]
          Type: SNSPublishMessagePolicy
        DynamoDBCrudPolicy:
          TableName: DynamoDBTable
          Type: DynamoDBCrudPolicy
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
